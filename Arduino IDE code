#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <bluefruit.h>

#define SEALEVELPRESSURE_HPA (1013.25) // Adjust this to your local sea level pressure (in hPa) for accurate altitude readings
#define BLE_UUID_SERVICE "180A"        // Device Information Service UUID
#define BLE_UUID_TEMPERATURE "2A6E"    // Temperature characteristic UUID
#define BLE_UUID_PRESSURE "2A6D"       // Pressure characteristic UUID
#define BLE_UUID_HUMIDITY "2A6F"       // Humidity characteristic UUID

Adafruit_BME280 bme; // I2C

BLEService bleService(BLE_UUID_SERVICE);
BLECharacteristic temperatureCharacteristic(BLE_UUID_TEMPERATURE);
BLECharacteristic pressureCharacteristic(BLE_UUID_PRESSURE);
BLECharacteristic humidityCharacteristic(BLE_UUID_HUMIDITY);

void setup() {
  Serial.begin(9600);
  while (!Serial);

  if (!bme.begin(0x76)) {
    Serial.println("Could not find a valid BME280 sensor, check wiring!");
    while (1);
  }

  // Initialize BLE
  Bluefruit.begin();
  Bluefruit.setTxPower(4); // Check for your board's valid power settings
  Bluefruit.Periph.setConnectCallback(connect_callback);
  Bluefruit.Periph.setDisconnectCallback(disconnect_callback);

  // Set up BLE service and characteristics
  bleService.begin();

  // Temperature characteristic setup
  temperatureCharacteristic.setProperties(CHR_PROPS_READ | CHR_PROPS_NOTIFY);
  temperatureCharacteristic.setPermission(SECMODE_OPEN, SECMODE_NO_ACCESS);
  temperatureCharacteristic.setFixedLen(4);
  temperatureCharacteristic.begin();

  // Pressure characteristic setup
  pressureCharacteristic.setProperties(CHR_PROPS_READ | CHR_PROPS_NOTIFY);
  pressureCharacteristic.setPermission(SECMODE_OPEN, SECMODE_NO_ACCESS);
  pressureCharacteristic.setFixedLen(4);
  pressureCharacteristic.begin();

  // Humidity characteristic setup
  humidityCharacteristic.setProperties(CHR_PROPS_READ | CHR_PROPS_NOTIFY);
  humidityCharacteristic.setPermission(SECMODE_OPEN, SECMODE_NO_ACCESS);
  humidityCharacteristic.setFixedLen(4);
  humidityCharacteristic.begin();

  // Start advertising BLE service
  Bluefruit.Advertising.addFlags(BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE);
  Bluefruit.Advertising.addTxPower();
  Bluefruit.Advertising.addService(bleService);
  Bluefruit.setName("nRF52840");

  Bluefruit.Advertising.restartOnDisconnect(true);
  Bluefruit.Advertising.setInterval(32, 244); // Check for your board's valid interval settings
  Bluefruit.Advertising.setFastTimeout(30);   // Number of seconds in fast mode
  Bluefruit.Advertising.start(0);             // 0 = Don't stop advertising

  Serial.println("-- BME280 Sensor Test --");

  // Set up oversampling and filter initialization
  bme.setSampling(Adafruit_BME280::MODE_NORMAL,
                  Adafruit_BME280::SAMPLING_X1, // temperature
                  Adafruit_BME280::SAMPLING_X1, // pressure
                  Adafruit_BME280::SAMPLING_X1, // humidity
                  Adafruit_BME280::FILTER_OFF);

  Serial.println("BME280 Sensor:");
}

void loop() {
  float temperature = bme.readTemperature();
  Serial.print("Temperature = ");
  Serial.print(temperature);
  Serial.println(" *C");

  temperatureCharacteristic.notify32((uint32_t)(temperature * 100));

  float pressure = bme.readPressure() / 100.0F; // Convert to hPa
  Serial.print("Pressure = ");
  Serial.print(pressure);
  Serial.println(" hPa");

  pressureCharacteristic.notify32((uint32_t)(pressure * 10));

  float humidity = bme.readHumidity();
  Serial.print("Humidity = ");
  Serial.print(humidity);
  Serial.println(" %");

  humidityCharacteristic.notify32((uint32_t)(humidity * 100));

  Serial.println();
  delay(5000); // Wait 0.5 seconds between measurements
}

void connect_callback(uint16_t conn_handle) {
  Serial.println("Connected");
}

void disconnect_callback(uint16_t conn_handle, uint8_t reason) {
  Serial.println("Disconnected");
}
