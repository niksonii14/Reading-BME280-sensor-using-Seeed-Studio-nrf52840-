<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sensor Data from Serial Port</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            margin: 0;
        }
        .container {
            background-color: #f3ceaa;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        h1 {
            margin-bottom: 20px;
        }
        button {
            background-color: #007bff;
            color: #fff;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #0056b3;
        }
        .data {
            margin-top: 20px;
        }
        .data p {
            font-size: 18px;
            margin: 10px 0;
        }
        .error {
            color: red;
        }
        .chart-container {
            margin-top: 20px;
            width: 100%;
            max-width: 600px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Breathing Analyzer</h1>
        <button id="connect">Connect</button>
        <div class="data">
            <p>Temperature: <span id="temperature">N/A</span> °C</p>
            <p>Pressure: <span id="pressure">N/A</span> hPa</p>
            <p>Humidity: <span id="humidity">N/A</span> %</p>
        </div>
        <div class="chart-container">
            <canvas id="temperatureChart" width="400" height="200"></canvas>
            <canvas id="pressureChart" width="400" height="200"></canvas>
            <canvas id="humidityChart" width="400" height="200"></canvas>
        </div>
        <p id="status" class="error"></p>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const labels = [];
        const temperatureData = [];
        const pressureData = [];
        const humidityData = [];
        let port;
        let reader;

        const temperatureConfig = {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Temperature (°C)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    data: temperatureData,
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Temperature Data Over Time',
                    },
                },
                scales: {
                    x: {
                        min: Date.now(),
                        max: Date.now() - 30000,
                    },
                    y: {
                        min: 0,
                        max: 40,
                    }
                }
            }
        };

        const pressureConfig = {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Pressure (hPa)',
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    data: pressureData,
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Pressure Data Over Time',
                    },
                },
                scales: {
                    x: {
                        min: Date.now(),
                        max: Date.now() - 30000,
                    },
                    y: {
                        min: 950,
                        max: 1050,
                    }
                }
            }
        };

        const humidityConfig = {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Humidity (%)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    data: humidityData,
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Humidity Data Over Time',
                    },
                },
                scales: {
                    x: {
                        min: Date.now(),
                        max: Date.now() - 300,
                    },
                    y: {
                        min: 0,
                        max: 100,
                    }
                }
            }
        };

        const temperatureChart = new Chart(
            document.getElementById('temperatureChart'),
            temperatureConfig
        );

        const pressureChart = new Chart(
            document.getElementById('pressureChart'),
            pressureConfig
        );

        const humidityChart = new Chart(
            document.getElementById('humidityChart'),
            humidityConfig
        );

        document.getElementById('connect').addEventListener('click', async () => {
            const statusElement = document.getElementById('status');
            statusElement.innerText = '';

            try {
                port = await navigator.serial.requestPort();
                await port.open({ baudRate: 9600 });

                const textDecoder = new TextDecoderStream();
                const readableStreamClosed = port.readable.pipeTo(textDecoder.writable);
                reader = textDecoder.readable.getReader();

                statusElement.innerText = 'Connected to serial port';
                readLoop();
            } catch (error) {
                console.error('Failed to connect:', error);
                statusElement.innerText = 'Failed to connect: ' + error.message;
            }
        });

        async function readLoop() {
            while (true) {
                const { value, done } = await reader.read();
                if (done) {
                    console.log('Stream closed');
                    reader.releaseLock();
                    break;
                }
                if (value) {
                    const lines = value.split('\n');
                    for (const line of lines) {
                        if (line.trim()) {
                            try {
                                const parsedData = JSON.parse(line);
                                processData(parsedData);
                            } catch (error) {
                                console.error('Failed to parse JSON:', error, 'Line:', line);
                            }
                        }
                    }
                }
            }
        }

        function processData(data) {
            const time = new Date().toLocaleTimeString();
            labels.push(time);

            if (data.temperature !== undefined) {
                document.getElementById('temperature').innerText = data.temperature.toFixed(2);
                temperatureData.push(data.temperature);
            }
            if (data.pressure !== undefined) {
                document.getElementById('pressure').innerText = data.pressure.toFixed(2);
                pressureData.push(data.pressure);
            }
            if (data.humidity !== undefined) {
                document.getElementById('humidity').innerText = data.humidity.toFixed(2);
                humidityData.push(data.humidity);
            }

            if (labels.length > 30) {
                labels.shift();
                if (temperatureData.length > 30) temperatureData.shift();
                if (pressureData.length > 30) pressureData.shift();
                if (humidityData.length > 30) humidityData.shift();
            }

            temperatureChart.update();
            pressureChart.update();
            humidityChart.update();
        }
    </script>
</body>
</html>
